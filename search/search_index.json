{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Prompt Fusion Documentation","text":"<p>This site documents the features, design, and usage of Prompt Fusion, which automates the generation of projects using a structured prompt system.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Theory</li> <li>Command Line Navigate to the next section to learn more about how it works.</li> </ul>"},{"location":"commandline/","title":"Command Line","text":""},{"location":"commandline/#command-line-documentation-for-prompt-fusion","title":"Command Line Documentation for Prompt Fusion","text":""},{"location":"commandline/#commands-overview","title":"Commands Overview","text":"<p>Prompt Fusion operates in two primary phases: Plan Phase and Code Generation Phase. Each phase is triggered by specific commands designed to maximize project creation efficiency.</p>"},{"location":"commandline/#general-command","title":"General Command","text":"<pre><code>prompt-fusion\n</code></pre> <ul> <li>Purpose: This is the smallest command that runs the Plan Phase. It initiates the browser-based planning tool, allowing users to define project structures and create <code>_prompts</code> folders with contents.</li> <li>Details: It launches the browser interface for folder and file configuration.</li> </ul>"},{"location":"commandline/#code-generation-command","title":"Code Generation Command","text":"<pre><code>prompt-fusion run\n</code></pre> <ul> <li>Purpose: This command executes the Code Generation Phase. It processes the prompts defined in the <code>_prompts</code> folders, generates the necessary files, and updates the project structure based on these blueprints.</li> <li>Details:</li> <li>Executes file generation only within folders containing <code>_prompts</code>.</li> <li>Efficiently skips files that haven\u2019t changed, preventing redundant generation.</li> <li>Ensures that generated files adhere to the defined structure and documentation.</li> </ul>"},{"location":"commandline/#subfolder-specific-code-generation","title":"Subfolder-Specific Code Generation","text":"<pre><code>prompt-fusion run --path &lt;subfolder&gt;\n</code></pre> <ul> <li>Purpose: Allows you to run the Code Generation Phase in a specific subfolder.</li> <li>Details:</li> <li>The engine will only generate files within the specified folder and its child directories.</li> <li>Useful for generating files in a portion of the project without triggering the entire root directory.</li> </ul>"},{"location":"commandline/#example-workflow","title":"Example Workflow","text":"<ol> <li>Plan Phase: </li> <li>Run <code>prompt-fusion</code> to open the planning GUI.</li> <li> <p>Define your project\u2019s structure, create <code>_prompts</code> folders, and configure file generation logic.</p> </li> <li> <p>Code Generation Phase:</p> </li> <li>Run <code>prompt-fusion run</code> to trigger the code generation for your entire project.</li> <li>Use <code>prompt-fusion run --path &lt;subfolder&gt;</code> to generate files only within a specific subfolder.</li> </ol> <p>a. Parallel Processing:       - Files are processed in parallel for efficient generation.</p> <p>b. Debugging:       - After the Code Generation Phase, any issues found by the debug robot are either auto-fixed or flagged for user intervention.</p>"},{"location":"commandline/#conclusion","title":"Conclusion","text":"<p>Prompt Fusion\u2019s command structure is designed for simplicity and efficiency, with the ability to scale project generation seamlessly, using concepts like parallel processing, cascading contexts, and auto-debugging inspired by successful patterns from Jest.</p>"},{"location":"mkdocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"theory/","title":"Prompt Fusion Documentation","text":""},{"location":"theory/#overview","title":"Overview","text":"<p>Prompt Fusion is a powerful tool designed to automate project generation through a structured, folder-based prompting system. It leverages the capabilities of Large Language Models (LLMs) to efficiently create files, manage changes, and debug potential issues, all while minimizing redundant generation.</p>"},{"location":"theory/#two-phases-of-operation","title":"Two Phases of Operation:","text":"<ol> <li> <p>Planning Phase: </p> <ul> <li>Users define the project structure and create prompts that guide the file generation process.</li> </ul> </li> <li> <p>Code Generation Phase: </p> <ul> <li>Executes the defined prompts to generate code and documentation based on the specifications provided.</li> </ul> </li> </ol>"},{"location":"theory/#key-concepts","title":"Key Concepts:","text":"<ul> <li> <p>Root Directory: </p> <ul> <li>The main folder where the project is managed and organized. The engine operates only when the configuration file <code>config.prompt-fusion.json</code> is identified in this directory.</li> </ul> </li> <li> <p>_prompts Folder: </p> <ul> <li>A folder within each directory that triggers the engine to generate files based on defined prompts. Placing a <code>_prompts</code> folder in a directory begins the blueprinting process for file generation.</li> </ul> </li> <li> <p>Redundant File Management: </p> <ul> <li>Uses versioning or hashing to prevent unnecessary file generation, applying updates only when changes are detected.</li> </ul> </li> <li> <p>Batch Processing: </p> <ul> <li>Handles file generation in parallel to manage large-scale projects efficiently.</li> </ul> </li> <li> <p>Debugging Robot: </p> <ul> <li>The only AI with a complete view of the project. It verifies that all generated files align with documentation and resolves any issues detected during the generation process.</li> </ul> </li> </ul>"},{"location":"theory/#features","title":"Features","text":""},{"location":"theory/#root-directory","title":"Root Directory","text":"<ul> <li>The root directory is the central location for project organization.</li> <li>The engine operates only when the <code>config.prompt-fusion.json</code> file is correctly identified in this directory.</li> </ul>"},{"location":"theory/#_prompts-folder","title":"_prompts Folder","text":"<ul> <li>To generate files within a folder, add a <code>_prompts</code> subfolder in that directory to blueprint the file generation.</li> <li>Purpose: Contains instructions and context for generating files.</li> <li>Contents: Includes prompt files and context documentation to aid in the generation process.</li> </ul>"},{"location":"theory/#example-structure","title":"Example Structure:","text":"<pre><code>project-root\n\u2502\n\u251c\u2500\u2500 config.prompt-fusion.json        # Configuration file for project settings\n\u251c\u2500\u2500 folder1                          # Random folder for the project\n\u2502   \u251c\u2500\u2500 _prompts                     # Folder containing prompts and related files (triggers the engine to create files in this directory)\n\u2502   \u2502   \u251c\u2500\u2500 files                    # Directory containing prompt files\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 filename.prompt.md   # A markdown file that generates one file in folder1\n\u2502   \u2502   \u2514\u2500\u2500 context                  # Directory for context-related documentation\n\u2502   \u2502       \u2514\u2500\u2500 random_file_for_context.md  # Loads the context before generating files\n</code></pre>"},{"location":"theory/#configuration-options","title":"Configuration Options:","text":"<ul> <li>cascadeParentFolderContext: <ul> <li> <p>A boolean option (defaults to <code>true</code>) that determines if context is loaded from parent <code>_prompts/context</code> directories. The context is loaded in the following order:</p> <ol> <li><code>folder1/_prompts/context</code></li> <li><code>folder1/folder2/_prompts/context</code></li> <li><code>folder1/folder2/folder3/_prompts/context</code></li> </ol> </li> </ul> </li> </ul>"},{"location":"theory/#file-generation-phases","title":"File Generation Phases","text":"<ol> <li> <p>Plan Phase: </p> <ul> <li>Users blueprint the project by creating directories and adding <code>_prompts</code> folders to locations where file generation is needed.</li> </ul> </li> <li> <p>Execute Phase:</p> <ul> <li>The engine processes each directory containing a <code>_prompts</code> folder, generating files according to the instructions.</li> <li>Directories without a <code>_prompts</code> folder are skipped.</li> <li>The system scans directories with <code>_prompts</code> folders and pushes tasks to a queue for processing.</li> <li>Robots answer requests on the queue to scale up the speed of the build.</li> <li>If files are modified, the engine ensures documentation is updated to keep everything in sync.</li> <li>After processing, a debug robot reviews the project to resolve issues, using its full project view to ensure generated files meet the requirements.</li> </ul> </li> </ol>"},{"location":"theory/#workflow","title":"Workflow","text":"<ol> <li>Initial Setup: Define the root directory, create <code>_prompts</code> folders, and add prompt instructions.</li> <li>Generation:<ul> <li>The engine runs through all <code>_prompts</code> folders and generates files.</li> <li>Skips files that have not changed.</li> </ul> </li> <li>Debugging:<ul> <li>Auto-fixes any simple issues, prompts the user for complex errors, and logs the status.</li> </ul> </li> <li>Final Output: Once all files are generated and errors are resolved, the project is ready for use.</li> </ol>"},{"location":"theory/#example-structure_1","title":"Example Structure","text":"<p>Here\u2019s a sample project folder structure using the Prompt Engine:</p> <pre><code>/my-project\n  \u251c\u2500\u2500 /config.prompt-fusion.json\n  \u251c\u2500\u2500 /src\n  \u2502    \u251c\u2500\u2500 app.ts\n  \u2502    \u2514\u2500\u2500 /_prompts\n  \u2502        \u2514\u2500\u2500 files\n  \u2502           \u2514\u2500\u2500 app.ts.prompt.md\n</code></pre>"},{"location":"theory/#conclusion","title":"Conclusion","text":"<p>The Prompt Engine streamlines the project generation process using a scalable, batch-oriented approach. With automated debugging, efficient file management, and user prompts, it ensures projects can be generated quickly and accurately.</p>"}]}